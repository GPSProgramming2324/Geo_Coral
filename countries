import geopandas as gpd

def filter_and_save_countries(input_geopackage, output_geojson, countries_of_interest):
    """
    Filter countries from a GeoPackage based on a list of countries and save the result as GeoJSON.

    Parameters:
        input_geopackage (str): Path to the input GeoPackage file.
        output_geojson (str): Path to save the output GeoJSON file.
        countries_of_interest (list): List of countries to select.

    Returns:
        None
    """

    countries_of_interest = ['Indonesia', 'Philippines', 'Malaysia', 'Thailand', 'Myanmar', 'East Timor', 'Vietnam', 'Singapore']

    # Read the GeoPackage into a GeoDataFrame
    #input_geopackage = ""
    gdf = gpd.read_file(input_geopackage)

    # Filter the GeoDataFrame based on the 'SOVEREIGN1' column
    selected_gdf = gdf[gdf['SOVEREIGN1'].isin(countries_of_interest)]

    # Save the selected GeoDataFrame as GeoJSON
    selected_gdf.to_file(output_geojson, driver='GeoJSON')
    output_geojson = "Data\Boundaries\selected_boundaries.geojson"

    print(f"Filtered countries saved to {output_geojson}")
    print(selected_gdf)

# Example usage:
input_geopackage = "Data\Boundaries\Boundaries.gpkg" 
output_geojson = "Data\Boundaries\selected_boundaries.geojson"
countries_of_interest = ['Indonesia', 'Philippines', 'Malaysia', 'Thailand', 'Myanmar', 'East Timor', 'Vietnam', 'Singapore']

filter_and_save_countries(input_geopackage, output_geojson, countries_of_interest)



######################################################################################################################
        
#FROM CHAT GPT


import psycopg2
from psycopg2 import sql

# Replace these parameters with your actual database connection details
database_params = {
    'dbname': 'geocoral_example',
    'user': 'postgres',
    'password': 'postegres',
    'host': 'localhost',
    'port': '5432',  # Replace with your PostgreSQL port if different
}

# Replace with your table name and column names
table_name = 'your_table_name'
column_names = ['column1', 'column2', 'column3']

# Function to establish a database connection
def create_connection():
    try:
        connection = psycopg2.connect(**database_params)
        print("Connection to the database successful")
        return connection
    except psycopg2.Error as e:
        print(f"Error: Unable to connect to the database\n{e}")
        return None

# Function to execute a SQL query
def execute_query(connection, query, data=None):
    try:
        with connection.cursor() as cursor:
            cursor.execute(query, data)
            connection.commit()
            print("Query executed successfully")
    except psycopg2.Error as e:
        print(f"Error: Unable to execute the query\n{e}")

# Example data to insert into the table
sample_data = [
    (value1, value2, value3),  # Replace with your actual data
    # Add more tuples for additional rows
]

# Example: Connect to the database and insert data into the table
connection = create_connection()

if connection:
    # Create an INSERT query with placeholders
    insert_query = sql.SQL("INSERT INTO {} ({}) VALUES ({})").format(
        sql.Identifier(table_name),
        sql.SQL(', ').join(map(sql.Identifier, column_names)),
        sql.SQL(', ').join(sql.Placeholder() * len(column_names))
    )

    # Execute the INSERT query for each tuple in the sample_data
    for data_row in sample_data:
        execute_query(connection, insert_query, data_row)

    # Close the connection when done
    connection.close()
    print("Connection closed")
